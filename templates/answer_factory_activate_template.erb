#encoding: utf-8
require 'answer-factory'
include Nudge
include AnswerFactory

####
####
#### EDIT THESE SETTINGS TO SUIT YOUR PROJECT:
####
####


#### CouchDB access:
configatron.factory.couchdb.server =          'http://127.0.0.1:5984'

#### Factory settings:
configatron.factory.name =                    'poly1'
configatron.factory.training_datasource =     "http://127.0.0.1:5984/poly1_training"

#### Workstation definitions:
configatron.project.workstations.path =       '/app/factory/workstations/*'

#### Nudge language extensions:
configatron.project.nudge.instructions.path = '/app/nudge/instructions/*'
configatron.project.nudge.types.path =        '/app/nudge/types/*'


##### this will soon be an attribute of the Factory, and saved as persistent config data
# but it's the components of your Factory instance, each of which will be sent a #cycle! message,
# in this order, by the launch code below
# workstations =[
#   GenerationStation.new(:maker),
#   ScoringStation.new(:scoring_station),
#   ScreeningStation.new(:picker)]

####
####
#### DON'T EDIT BEYOND THIS POINT
####
####

# extend Nudge
Dir.glob(File.dirname(__FILE__) + configatron.project.nudge.instructions.path) {|file| require file}
Dir.glob(File.dirname(__FILE__) + configatron.project.nudge.types.path) {|file| require file}

# confirm database access
raise "CouchDB not available at #{configatron.factory.couchdb.server}" unless
  Factory.couch_available?()

# extend Workstation
Dir.glob(File.dirname(__FILE__) + configatron.project.workstations.path) {|file| require file}


### these should get tucked away elsewhere:

project = Factory.new()

# reset database
db = CouchRest.database!("#{configatron.factory.couchdb.server}/#{configatron.factory.name}")
db.delete!
db.create!

db_train = CouchRest.database!("#{configatron.factory.training_datasource}")
db_train.delete!
db_train.create!


workstations =[
  GenerationStation.new(:maker),
  ScoringStation.new(:scoring_station),
  ScreeningStation.new(:screening_station),
  RebreedingStation.new(:rebreeding_station)]



# create required view document(s)
workstations.each {|ws| ws.couchdb_create_view}


# final workcycle behavior
1000.times do
  workstations.each do |ws|
    ws.cycle
  end
end
